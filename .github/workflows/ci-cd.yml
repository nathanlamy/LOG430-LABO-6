name: CI/CD Pipeline

on:
  push:
    branches: [ main ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Lint all services
        run: |
          for dir in produit-service vente-service stock-service reporting-service; do
            echo "🔍 Linting $dir"
            cd $dir
            npm ci
            npm run lint || echo "Lint warnings ignored"
            cd ..
          done

  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: magasin_user
          POSTGRES_PASSWORD: secret
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Wait for Postgres and create DBs
        env:
          PGPASSWORD: secret
        run: |
          until pg_isready -h localhost -p 5432; do sleep 1; done

          for db in produit_db vente_db stock_db reporting_db; do
            echo "Creating database: $db"
            psql -h localhost -U magasin_user -c "CREATE DATABASE $db;"
          done

      - name: Run tests for all services
        run: |
          for dir in produit-service vente-service stock-service reporting-service; do
            echo "🧪 Testing $dir"
            cd $dir
            npm ci
            case $dir in
              produit-service)
                export DATABASE_URL=postgres://magasin_user:secret@localhost:5432/produit_db
                ;;
              vente-service)
                export DATABASE_URL=postgres://magasin_user:secret@localhost:5432/vente_db
                ;;
              stock-service)
                export DATABASE_URL=postgres://magasin_user:secret@localhost:5432/stock_db
                ;;
              reporting-service)
                export DATABASE_URL=postgres://magasin_user:secret@localhost:5432/reporting_db
                ;;
            esac
            npm test
            cd ..
          done

  docker:
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: success()
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install deps in all services
        run: |
          cd produit-service && npm ci && cd ..
          cd vente-service && npm ci && cd ..
          cd stock-service && npm ci && cd ..
          cd reporting-service && npm ci && cd ..
          cd boutique-service && npm ci && cd ..
          cd orchestrateur-saga-service && npm ci && cd ..

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push all Docker images
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/produit-service:latest ./produit-service
          docker push ${{ secrets.DOCKER_USERNAME }}/produit-service:latest

          docker build -t ${{ secrets.DOCKER_USERNAME }}/vente-service:latest ./vente-service
          docker push ${{ secrets.DOCKER_USERNAME }}/vente-service:latest

          docker build -t ${{ secrets.DOCKER_USERNAME }}/stock-service:latest ./stock-service
          docker push ${{ secrets.DOCKER_USERNAME }}/stock-service:latest

          docker build -t ${{ secrets.DOCKER_USERNAME }}/reporting-service:latest ./reporting-service
          docker push ${{ secrets.DOCKER_USERNAME }}/reporting-service:latest

          docker build -t ${{ secrets.DOCKER_USERNAME }}/boutique-service:latest ./boutique-service
          docker push ${{ secrets.DOCKER_USERNAME }}/boutique-service:latest

          docker build -t ${{ secrets.DOCKER_USERNAME }}/orchestrateur-saga-service:latest ./orchestrateur-saga-service
          docker push ${{ secrets.DOCKER_USERNAME }}/orchestrateur-saga-service:latest